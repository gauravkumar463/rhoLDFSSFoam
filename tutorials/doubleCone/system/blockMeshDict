/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 0.001;

R0 0.4;
R1 15.995;
R2 28.355;

L1 59.6942;
L2 20;
L3 #eval{ -0.1*$L1 };

H1 #eval{ 2*$R2 };

Arch 2;
Sa #eval{ sin(degToRad($Arch)) };
Ca #eval{ cos(degToRad($Arch)) };

N1 800;
N2 400; // change this depending on Lambda
N3 427;
NH 200;
//N5 ;//511+322;

vertices
(
    ( $L3 0 0 ) //0
    ( 0 0 0 ) //1
    ( $L1 #eval{$R1*$Ca}  -#eval{$R1*$Sa} ) //2
    ( $L1 #eval{$R2*$Ca} -#eval{$R2*$Sa} ) //3
    ( #eval{$L1+$L2}  #eval{$R2*$Ca} -#eval{$R2*$Sa} ) //4
    ( #eval{$L1+$L2}  #eval{$H1*$Ca} -#eval{$H1*$Sa} ) //5
    ( $L1 #eval{$H1*$Ca} -#eval{$H1*$Sa} ) //6
    ( 0 #eval{$H1*$Ca - $R1*$Ca } -#eval{$H1*$Sa - $R1*$Sa} ) //7
    ( $L3 #eval{$H1*$Ca - $R1*$Ca } -#eval{$H1*$Sa - $R1*$Sa} ) //8
    ( $L3 #eval{$R2*$Ca - $R1*$Ca} -#eval{$R2*$Sa - $R1*$Sa} ) //9
    ( 0 #eval{$R2*$Ca - $R1*$Ca} -#eval{$R2*$Sa - $R1*$Sa} ) //10    

    //( $L3 0 #eval{$R1*$Sa} ) //11
    //( 0 0 #eval{$R1*$Sa} ) //12
    ( $L1 #eval{$R1*$Ca}  #eval{$R1*$Sa} ) //13
    ( $L1 #eval{$R2*$Ca} #eval{$R2*$Sa} ) //14
    ( #eval{$L1+$L2}  #eval{$R2*$Ca} #eval{$R2*$Sa} ) //15
    ( #eval{$L1+$L2}  #eval{$H1*$Ca} #eval{$H1*$Sa} ) //16
    ( $L1 #eval{$H1*$Ca} #eval{$H1*$Sa} ) //17
    ( 0 #eval{$H1*$Ca - $R1*$Ca } #eval{$H1*$Sa - $R1*$Sa} ) //18
    ( $L3 #eval{$H1*$Ca - $R1*$Ca } #eval{$H1*$Sa - $R1*$Sa} ) //19
    ( $L3 #eval{$R2*$Ca - $R1*$Ca} #eval{$R2*$Sa - $R1*$Sa} ) //20
    ( 0 #eval{$R2*$Ca - $R1*$Ca} #eval{$R2*$Sa - $R1*$Sa} ) //21
);

blocks
(
    hex (0 1 10 9 0 1 19 18) (24 1236 1) simpleGrading (0.2 1 1) //END-CELL Size: X- 0.04535147392 
    hex (1 2 3 10 1 11 12 19) (600 1236 1) simpleGrading (1 1 1) //END-CELL Size: X- 0.09070294784 
    hex (3 4 5 6 12 13 14 15) (80 131 1) simpleGrading (5 100 1)
    hex (10 3 6 7 19 12 15 16) (600 131 1) simpleGrading (1 100 1)
    hex (9 10 7 8 18 19 16 17) (24 131 1) simpleGrading (0.2 100 1) 
);

edges
(
    //arc 0 11 (-10 0.4 0)  //( $L3 $R0 0 )
    //arc 1 12 (0 0.4 0)    //( 0 $R0 0 )
    arc 2 11 (40 18.65 0) // ( $L1 $R1 0 )
    arc 3 12 (40 40 0)    //( $L1 $R2 0 )
    arc 4 13 (60 40 0)    //( #eval{$L1+$L2} $R2 0 )
    arc 5 14 (60 80 0)    //( #eval{$L1+$L2} $H1 0 )
    arc 6 15 (40 80 0)    //( $L1 $H1 0 )
    arc 7 16 (0 61.35 0)  //( 0 #eval{$H1 - $R1} 0 )
    arc 8 17 (-10 61.35 0)//( $L3 #eval{$H1 - $R1} 0 )
    arc 9 18  (-10 21.35 0)//( $L3 #eval{$R2 - $R1} 0 )
    arc 10 19 (0 21.35 0) //( 0 #eval{$R2 - $R1} 0 ) 
);

boundary
(
    inlet
    {
        type patch;
        faces
        (
            (0 9 18 0)
            (9 8 17 18)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (4 13 14 5)
        );
    }
    wedge
    {
        type wall;
        faces
        (
            ( 1 11 2 1 )
            ( 2 11 12 3 )
            ( 3 12 13 4 )
        );
    }
    side1
    {
	type wedge;
	faces
	(
           (0 1 10 9)
           (1 2 3 10)
           (3 4 5 6)
           (10 3 6 7)
           (9 10 7 8)
	);
    }
    side2
    {
    	type wedge;
    	faces
    	(
    	   (18 19 1 0)
    	   (19 12 11 1)
    	   (15 14 13 12)
    	   (16 15 12 19)
    	   (17 16 19 18)
    	);
    }

/*
    side
    {
	type patch;
	faces
	(
	   //(0 1 10 9)
	   (9 10 7 8)
	   (17 16 19 18)
           //(18 19 1 0)
 	   //(1 2 3 10)
           (10 3 6 7)
	   (16 15 12 19)
           //(19 12 11 1)
	   (3 4 5 6)
	   (15 14 13 12)
	);
    }
*/
    top
    {
       type patch;
       faces
       (
           (8 7 16 17)
           (7 6 15 16)
	   (6 5 14 15)
       );
     }
/*    plane
   {
	type empty;
	faces
	(
	   (0 1 1 0)
	);
    }
*/
);

mergePatchPairs
(
);

// ************************************************************************* //
